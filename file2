@ExtendWith(MockitoExtension.class)
class StatesServiceImplTest {

    @InjectMocks
    private StatesServiceImpl statesService;

    @Mock
    private SubsidiaryServiceFeign subsidiaryServiceFeign;

    @Mock
    private InterestCalculationServiceImpl interestCalculationServiceImpl;

    @Mock
    private CumulativeLevelingsServiceImpl cumulativeLevelingsServiceImpl;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(statesService, "reportPath", "src/test/resources/reports");
    }

    private GlobalReportRequest createRequest() {
        GlobalReportRequest request = new GlobalReportRequest();
        request.setMonth(YearMonth.of(2024, 3));
        request.setGroupNum("G001");
        request.setClientName("SGMA");
        request.setSubsidiaryName("SUB001");
        request.setReportTypeId(1L);
        return request;
    }

    @Test
    void testGenerateArreteIntraGroupeReport() {
        GlobalReportRequest request = createRequest();

        Long clientId = 1L;
        SubsidiaryDTO subsidiary = new SubsidiaryDTO();
        subsidiary.setId(100L);
        subsidiary.setName("SUB001");

        List<SubsidiaryDTO> subsidiaries = new ArrayList<>();
        subsidiaries.add(subsidiary);

        Map<String, AccountInterestDetails> map = new HashMap<>();
        map.put("123", mockAccountInterestDetails());

        InterestReport report = new InterestReport("MAD", "REF001", "GROUP", "ADDR", "123", "ADR", LocalDate.now().minusDays(10), LocalDate.now(), map);
        report.setCalculationPeriod("01/03/2024 au 31/03/2024");

        when(subsidiaryServiceFeign.getSubsidiariesByClientId(clientId)).thenReturn(subsidiaries);
        when(interestCalculationServiceImpl.calculateMonthlyInterestReport(eq(clientId), anyLong(), any())).thenReturn(report);
        doReturn(clientId).when(statesService).getClientId(request);

        ResponseEntity<?> response = statesService.generateArreteIntraGroupeReport(request);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void testGenerateCumulativeLevelingsReport() {
        GlobalReportRequest request = createRequest();

        Long clientId = 1L;
        SubsidiaryDTO subsidiary = new SubsidiaryDTO();
        subsidiary.setId(100L);
        subsidiary.setName("SUB001");

        Map<String, AccountCumulativeLevelingDetails> map = new HashMap<>();
        map.put("123", mockAccountCumulativeDetails());

        CumulativeLevelingsReport report = new CumulativeLevelingsReport("MAD", "GROUP", "REF", "ADR", "ADR", "123",
                LocalDate.now().minusDays(10), LocalDate.now(), "COMPANY", null, null, null, null, null, null, null, map);

        when(subsidiaryServiceFeign.getSubsidiaryByName("SUB001")).thenReturn(subsidiary);
        when(cumulativeLevelingsServiceImpl.calculateMonthlyCumulativeLevelingsReport(eq(clientId), anyLong(), any())).thenReturn(report);
        doReturn(clientId).when(statesService).getClientId(request);

        ResponseEntity<?> response = statesService.generateCumulativeLevelingsReport(request);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void testGenerateCumulativeLevelingsGroupReport() {
        GlobalReportRequest request = createRequest();

        Long clientId = 1L;
        SubsidiaryDTO subsidiary = new SubsidiaryDTO();
        subsidiary.setId(100L);
        subsidiary.setName("SUB001");

        List<SubsidiaryDTO> subsidiaries = new ArrayList<>();
        subsidiaries.add(subsidiary);

        Map<String, AccountCumulativeLevelingDetails> map = new HashMap<>();
        map.put("123", mockAccountCumulativeDetails());

        CumulativeLevelingsReport report = new CumulativeLevelingsReport("MAD", "GROUP", "REF", "ADR", "ADR", "123",
                LocalDate.now().minusDays(10), LocalDate.now(), "COMPANY", null, null, null, null, null, null, null, map);

        when(subsidiaryServiceFeign.getSubsidiariesByClientId(clientId)).thenReturn(subsidiaries);
        when(cumulativeLevelingsServiceImpl.calculateMonthlyCumulativeLevelingsReport(eq(clientId), anyLong(), any())).thenReturn(report);
        doReturn(clientId).when(statesService).getClientId(request);

        ResponseEntity<?> response = statesService.generateCumulativeLevelingsGroupReport(request);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    private AccountInterestDetails mockAccountInterestDetails() {
        AccountInterestDetails details = new AccountInterestDetails();
        details.setAccountName("Test Account");
        details.setAccountNumber("123");
        details.setAmountToBeChargedCredit(BigDecimal.TEN);
        details.setAmountToBeChargedDebit(BigDecimal.ONE);
        details.setGrossCreditAmount(BigDecimal.TEN);
        details.setGrossDebitAmount(BigDecimal.ONE);
        details.setRetainedCreditAmount(BigDecimal.ZERO);
        details.setRetainedDebitAmount(BigDecimal.ZERO);
        details.setWithholdingTax(BigDecimal.ZERO);
        return details;
    }

    private AccountCumulativeLevelingDetails mockAccountCumulativeDetails() {
        AccountCumulativeLevelingDetails details = new AccountCumulativeLevelingDetails();
        details.setAccountNumber("123");
        details.setCompanyName("TestCompany");
        details.setCumulativeLevelingCredit(BigDecimal.TEN);
        details.setCumulativeLevelingDebit(BigDecimal.ONE);
        details.setCumulativeLevelingNet(BigDecimal.valueOf(9));
        details.setLastCumulativeLevelingCredit(BigDecimal.ONE);
        details.setLastCumulativeLevelingDebit(BigDecimal.ONE);
        details.setLastCumulativeLevelingNet(BigDecimal.ZERO);
        return details;
    }
}
