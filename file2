@Test
void testGenerateLoanBorrowingReports_success() throws Exception {
    // Arrange
    ClientDTO client = new ClientDTO();
    client.setSubsidiaries(List.of(new SubsidiaryDTO("TestSubsidiary")));
    when(clientServiceFeign.getAllClients()).thenReturn(List.of(client));

    PPTStateCalculator.PositionReport report = new PPTStateCalculator.PositionReport();
    report.setClientName("ClientX");
    report.setSubsidiaryName("TestSubsidiary");
    report.setReferenceDate(LocalDate.now());
    report.setAddress("AddressX");
    report.setStateReference("REF001");
    report.setClientAccountNumber("123456");
    report.setCurrency("EUR");
    report.setPositions(List.of(new Object())); // simulate positions
    report.setStateAttach(null);

    when(pptStateCalculator.calculateLastNWorkingDayPositions(any(), any(), any()))
            .thenReturn(CompletableFuture.completedFuture(report));

    when(attachmentRepository.existsById(any())).thenReturn(false);

    // Act
    scheduler.generateLoanBorrowingReports();

    // Assert
    verify(attachmentRepository, atLeastOnce()).save(any());
    verify(attachmentServiceImpl, atLeastOnce()).save(any(), any(), eq(false));
}
@Test
void testGenerateLoanBorrowingReports_emptyClientList() {
    when(clientServiceFeign.getAllClients()).thenReturn(Collections.emptyList());
    scheduler.generateLoanBorrowingReports();
    verify(pptStateCalculator, never()).calculateLastNWorkingDayPositions(any(), any(), any());
    verify(attachmentRepository, never()).save(any());
}
@Test
void testGenerateLoanBorrowingReports_nullReport() throws Exception {
    ClientDTO client = new ClientDTO();
    client.setSubsidiaries(List.of(new SubsidiaryDTO("TestSubsidiary")));
    when(clientServiceFeign.getAllClients()).thenReturn(List.of(client));

    when(pptStateCalculator.calculateLastNWorkingDayPositions(any(), any(), any()))
            .thenReturn(CompletableFuture.completedFuture(null));

    scheduler.generateLoanBorrowingReports();

    verify(attachmentRepository, never()).save(any());
}

@Test
void testGenerateLoanBorrowingReports_withException() throws Exception {
    ClientDTO client = new ClientDTO();
    client.setSubsidiaries(List.of(new SubsidiaryDTO("TestSubsidiary")));
    when(clientServiceFeign.getAllClients()).thenReturn(List.of(client));

    when(pptStateCalculator.calculateLastNWorkingDayPositions(any(), any(), any()))
            .thenThrow(new RuntimeException("Erreur simulateur"));

    scheduler.generateLoanBorrowingReports();

    // Pas d’exception propagée, elle est catchée
    verify(attachmentRepository, never()).save(any());
}


