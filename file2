@Test
void testGenerateArreteIntraGroupeReport() throws Exception {
    GlobalReportRequest request = createRequest();

    SubsidiaryDTO sub = new SubsidiaryDTO();
    sub.setId(1L);
    
    List<SubsidiaryDTO> subsidiaries = new ArrayList<>();
    subsidiaries.add(sub);
    when(subsidiaryServiceFeign.getSubsidiariesByClientId(anyLong())).thenReturn(subsidiaries);

    InterestReport interestReport = new InterestReport();
    interestReport.setCurrency("EUR");
    interestReport.setReportReference("REF-001");
    interestReport.setGroupName("GroupA");
    interestReport.setPivotAddress("Address A");
    interestReport.setPivotAccountNumber("ACC-001");
    interestReport.setCalculationPeriod("01/12/2024 - 31/12/2024");

    AccountInterestDetails accountDetails = new AccountInterestDetails();
    accountDetails.setAccountName("Account A");
    accountDetails.setAccountNumber("001");
    accountDetails.setGrossCreditAmount(BigDecimal.TEN);
    accountDetails.setGrossDebitAmount(BigDecimal.TEN);
    accountDetails.setAmountToBeChargedCredit(BigDecimal.ONE);
    accountDetails.setAmountToBeChargedDebit(BigDecimal.ONE);
    accountDetails.setRetainedCreditAmount(BigDecimal.ZERO);
    accountDetails.setRetainedDebitAmount(BigDecimal.ZERO);
    accountDetails.setWithholdingTax(BigDecimal.ZERO);

    Map<String, AccountInterestDetails> detailsMap = new HashMap<>();
    detailsMap.put("001", accountDetails);
    interestReport.setAccountDetails(detailsMap);

    when(interestCalculationServiceImpl.calculateMonthlyInterestReport(anyLong(), anyLong(), any()))
        .thenReturn(interestReport);

    ResponseEntity<?> response = reportService.generateArreteIntraGroupeReport(request);

    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertTrue(response.getBody() instanceof InputStreamResource);
}
