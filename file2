@BeforeEach
    void init() {
        ReflectionTestUtils.setField(scheduler, "reportDirectory", "target");
        ReflectionTestUtils.setField(scheduler, "pathPiecesJointes", "target/pieces_jointes");
    }

    @Test
    void testGenerateLoanBorrowingReports_success() throws Exception {
        // Setup mocks
        ClientDTO client = new ClientDTO();
        SubsidiaryDTO subsidiary = new SubsidiaryDTO();
        subsidiary.setName("TestSubsidiary");
        client.setSubsidiaries(List.of(subsidiary));

        when(clientServiceFeign.getAllClients()).thenReturn(List.of(client));

        PPTStateCalculator.PositionReport report = new PPTStateCalculator.PositionReport();
        report.setPositions(List.of(new Object())); // remplacez par un bean réel si nécessaire
        report.setClientName("TestClient");
        report.setSubsidiaryName("TestSub");
        report.setAddress("Some Address");
        report.setStateReference("Ref001");
        report.setClientAccountNumber("ACC123");
        report.setReferenceDate(LocalDate.now());
        report.setStateAttach("Attachment");
        report.setCurrency("USD");

        when(PPTStateCalculator.calculateLastNWorkingDayPositions(any(), any(), any()))
                .thenReturn(CompletableFuture.completedFuture(report));

        when(attachmentRepository.existsById(any())).thenReturn(false);

        // Lancer la méthode à tester
        scheduler.generateLoanBorrowingReports();

        // Vérifier qu'un fichier a été sauvegardé
        verify(attachmentRepository).save(any());
        verify(attachmentServiceImpl).save(any(), any(), eq(false));
    }

    @Test
    void testGenerateLoanBorrowingReports_reportNull() throws Exception {
        ClientDTO client = new ClientDTO();
        SubsidiaryDTO subsidiary = new SubsidiaryDTO();
        subsidiary.setName("EmptySubsidiary");
        client.setSubsidiaries(List.of(subsidiary));

        when(clientServiceFeign.getAllClients()).thenReturn(List.of(client));
        when(PPTStateCalculator.calculateLastNWorkingDayPositions(any(), any(), any()))
                .thenReturn(CompletableFuture.completedFuture(null));

        scheduler.generateLoanBorrowingReports();

        verifyNoInteractions(attachmentServiceImpl);
    }

    @Test
    void testGenerateLoanBorrowingReports_withException() {
        when(clientServiceFeign.getAllClients()).thenThrow(new RuntimeException("Test exception"));
        assertDoesNotThrow(() -> scheduler.generateLoanBorrowingReports());
    }
}
